{"version":3,"sources":["components/PersonForm.js","components/Filter.js","components/Persons.js","components/Notification.js","services/persons.js","App.js","serviceWorker.js","index.js"],"names":["PersonForm","_ref","name","number","nameHandler","numberHandler","submitHandler","react_default","a","createElement","onSubmit","value","onChange","type","Filter","text","eventHandler","Persons","list","Notification","message","errorState","className","baseUrl","services_persons","axios","get","then","response","data","newObject","post","id","delete","concat","put","Name","deleteHandler","onClick","App","_useState","useState","_useState2","Object","slicedToArray","persons","setPersons","_useState3","_useState4","newName","setNewName","_useState5","_useState6","newNumber","setNewNumber","_useState7","_useState8","nameFilter","setNameFilter","_useState9","_useState10","notification","setNotification","_useState11","_useState12","setErrorState","console","log","length","useEffect","personService","initPersons","deleteName","event","delid","target","person","filter","p","window","confirm","deletedName","setTimeout","catch","error","components_Notification","components_Filter","components_PersonForm","preventDefault","nameObject","exists","forEach","lowercaseName","toLowerCase","nameExists","updatedNumber","map","returnedName","components_Persons","lcNameFilter","includes","App_Name","key","listNames","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2b848b6f.chunk.js","sourcesContent":["import React from 'react'\n\nconst PersonForm = ({name, number, nameHandler, numberHandler, submitHandler}) => {\n  return (\n    <form onSubmit={submitHandler}>\n      <div>nimi: <input value={name} onChange={nameHandler} /></div>\n      <div>numero: <input value={number} onChange={numberHandler} /></div>\n      <div>\n        <button type=\"submit\">lisää</button>\n      </div>\n    </form>\n  )\n}\n\nexport default PersonForm\n","import React from 'react'\n\nconst Filter = ({text, eventHandler}) => {\n  return (\n      <div>Rajaa näytettäviä: <input value={text} onChange={eventHandler} /></div>\n  )\n}\n\nexport default Filter\n","import React from 'react'\n\nconst Persons = ({list}) => {\n  return (\n    <ul>\n    {list}\n    </ul>\n  )\n}\n\nexport default Persons\n","import React from 'react'\n\nconst Notification = ({ message, errorState }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className={errorState ? \"error\" : \"notification\"}>\n      {message}\n    </div>\n  )\n}\n\nexport default Notification\n","import axios from 'axios'\n// const baseUrl = 'http://localhost:3001/api/persons'\n// const baseUrl = 'https://immense-tor-60437.herokuapp.com/api/persons'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst del = (id) => {\n  const request = axios.delete(`${baseUrl}/${id}`)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nexport default {\n  getAll, create, del, update\n}\n","import React, { useState, useEffect } from 'react'\nimport PersonForm from './components/PersonForm.js'\nimport Filter from './components/Filter.js'\nimport Persons from './components/Persons.js'\nimport Notification from './components/Notification.js'\nimport personService from './services/persons.js'\n\nconst Name = ({id, name, number, deleteHandler}) => {\n  return (\n    <li>{name} {number} <button onClick={deleteHandler} value={id}>poista</button></li>\n  )\n}\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ nameFilter, setNameFilter ] = useState('')\n  const [ notification, setNotification ] = useState(null)\n  const [ errorState, setErrorState ] = useState(false)\n\n  const hook = () => {\n    personService\n      .getAll()\n      .then(initPersons => {\n        setPersons(initPersons)\n      })\n    }\n  console.log('render', persons.length, 'persons')\n\n  useEffect(hook, [])\n\n  const nameExists = (name) => {\n    let exists = false\n    persons.forEach(person => {\n      let lowercaseName = person.name.toLowerCase()\n      if (name.toLowerCase() === lowercaseName) {\n        exists = true\n      }\n    })\n    return exists\n  }\n\n  const addName = (event) => {\n    event.preventDefault()\n    const nameObject = {\n      name: newName,\n      number: newNumber\n    }\n    if (nameExists(newName)) {\n      const result = window.confirm(`${newName} on jo luettelossa, korvataanko vanha numero uudella?`)\n      if (result) {\n        const person = persons.filter(p => p.name === newName)[0]\n        personService\n          .update(person.id, nameObject)\n          .then(updatedNumber => {\n            setPersons(persons.map(p => (p.id === person.id ? updatedNumber : p)))\n            setNotification(`Korvattiin numero, uusi numero: ${updatedNumber.number}`)\n            setTimeout(() => {\n              setNotification(null)\n            }, 5000)\n          })\n          .catch(error => {\n            setErrorState(true)\n            setNotification(`Tietoa henkilöstä ${person.name} ei löydy!`)\n            setTimeout(() => {\n              setNotification(null)\n              setErrorState(false)\n            }, 5000)\n          })\n      }\n    } else {\n      personService\n        .create(nameObject)\n        .then(returnedName => {\n          setPersons(persons.concat(returnedName))\n          setNotification(`Lisättiin ${returnedName.name}`)\n          setTimeout(() => {\n            setNotification(null)\n          }, 5000)\n        })\n        .catch(error => {\n          setErrorState(true)\n          setNotification(error.response.data.error)\n          setTimeout(() => {\n            setNotification(null)\n            setErrorState(false)\n          }, 5000)\n        })\n    }\n    setNewName('')\n    setNewNumber('')\n  }\n\n  const deleteName = (event) => {\n    const delid = event.target.value\n    const person = persons.filter(p => p.id === delid)[0]\n    const result = window.confirm(`Poistetaanko ${person.name}?`)\n    if (result) {\n      personService\n        .del(delid)\n        .then(deletedName => {\n          setPersons(persons.filter(p => p.id !== delid))\n          setNotification(`Poistettiin ${person.name}`)\n          setTimeout(() => {\n            setNotification(null)\n          }, 5000)\n        })\n        .catch(error => {\n          setErrorState(true)\n          setNotification(`Henkilön ${person.name} poisto ei onnistunut!`)\n          setTimeout(() => {\n            setNotification(null)\n            setErrorState(false)\n          }, 5000)\n        })\n    }\n  }\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilterChange = (event) => {\n    setNameFilter(event.target.value)\n  }\n\n  const listNames = () => {\n    const lcNameFilter = nameFilter.toLowerCase()\n    const filtered = persons.filter(person => person.name.toLowerCase().includes(lcNameFilter))\n    return filtered.map(person => {\n      return <Name key={person.id} id={person.id} name={person.name} number={person.number} deleteHandler={deleteName} />\n    })\n  }\n\n  return (\n    <div>\n      <h2>Puhelinluettelo</h2>\n      <Notification message={notification} errorState={errorState} />\n      <Filter text={nameFilter} eventHandler={handleFilterChange} />\n      <h3>Lisää uusi</h3>\n      <PersonForm name={newName} number={newNumber} nameHandler={handleNameChange}\n        numberHandler={handleNumberChange} submitHandler={addName} />\n      <h3>Numerot</h3>\n      <Persons list={listNames()} />\n    </div>\n  )\n\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}